//Здесь нужно было поработать с файлом, записать туда структуру, а потом считать оттуда в вектор структур

//Заголовочный файл тоже сюда добавлю
#include <fstream>
#include <iostream>
#include <map>
#include <string>
#include <utility>
#include <vector>

#ifndef INCLUDE_HEADER_HPP_
#define INCLUDE_HEADER_HPP_

struct Book {
  std::string Author;
  std::string Title;
  int Year;
};

enum Score { Unsatisfactorily = 2, Satisfactorily, Good, Excellent };

struct Student {
  std::string Name;
  int Year;
  std::map<std::string, Score> RecordBook;
};

using Groups = std::map<std::string, std::vector<Student>>;

void saveToFile(const std::string&, const std::vector<std::string>&);
void loadFromFile(const std::string&, std::vector<std::string>&);
void saveToFile(const std::string&, const std::vector<Book>&);
void loadFromFile(const std::string&, std::vector<Book>&);
void saveToFile(const std::string&, const Groups&);
void loadFromFile(const std::string&, Groups&);

#endif  // INCLUDE_HEADER_HPP_

void loadFromFile(const std::string& filename, std::vector<Book>& outData) {
  std::ifstream file(filename);
  if (!file.is_open()) {
    outData.clear();
    std::cerr << "File isn't open";
    return;
  }
  std::string author;
  std::string title;
  std::string year;
  Book book;
  while (getline(file, author) && getline(file, title) && getline(file, year)) {
    book.Author = author;
    book.Title = title;
    book.Year = std::stoi(year);
    outData.push_back(book);
  }
  file.cl

void saveToFile(const std::string& filename, const std::vector<Book>& data) {
  std::ofstream file(filename);
  if (!file.is_open()) {
    std::cerr << "File isn't open";
    return;
  }
  for (const auto& book : data) {
    file << book.Author << std::endl
         << book.Title << std::endl
         << book.Year << std::endl;
  }
  file.close();
}
