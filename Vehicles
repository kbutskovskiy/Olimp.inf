//C++17 В задаче нужно было реализовать свой класс Vehicles и дочерние классы. По сути тут я осваивал парадигмы ООП.
Код классов
Vehicle.h:
#include <iostream>
#include <stdlib.h>

class Vehicle {
public:
    const char DefaultVehicleName[16] = "Untyped vehicle";
    const double DefaultVehicleSpeed = -1.;
    Vehicle() : totalDistance(0), totalTime(0), baseSpeed(DefaultVehicleSpeed) {
        SetName(DefaultVehicleName);
    }

    Vehicle(const char inNameCString[], double inBaseSpeed, int inBasePrice = 0) : totalDistance(0),
                                                                               totalTime(0), baseSpeed(inBaseSpeed) {
        SetName(inNameCString);
    }

    virtual ~Vehicle() {

    }

    virtual const char* GetName() const {
        return nameCString;
    }

    virtual double GetBaseSpeed() const {
        return baseSpeed;
    }

    double GetTotalDistance() const {
        return totalDistance;
    }

    double GetTotalTime() const {
        return totalTime;
    }

    virtual bool MakeTrip(double distanceOfTrip) = 0;

    virtual double GetSpeed() const = 0;

    bool operator< (Vehicle& rhs) const {
        if (GetSpeed() < rhs.GetSpeed()) {
            return true;
        }
        return false;
    }

    static const int MAX_NAME_LENGTH = 50;

protected:
    double totalDistance;
    double totalTime;

private:
    void SetName(const char inNameCString[]) {
        int i = 0;
        for (i = 0; (inNameCString[i] != 0) && (i < MAX_NAME_LENGTH); ++i) {
            nameCString[i] = inNameCString[i];
        }
        i+=1;
        nameCString[i] = 0;
    }

    char nameCString[MAX_NAME_LENGTH];
    double baseSpeed;
};

Coach.h:
	#include <iostream>
#include <stdlib.h>
#include "Vehicle.h"
#include <cmath>

class Coach : virtual public Vehicle {
public:
    static const int MAX_DISTANCE = 20;
    const char DefaultCoachName[14] = "Default Coach";
    const double DefaultCoachSpeed = 10.;

    Coach() {
        SetName(DefaultCoachName);
    }

    Coach(const char inNameCString[], double inBaseSpeed, int inBasePrice = 0)  {
        SetName(inNameCString);
        Speed = inBaseSpeed;
    }

    Coach(const Coach&) = default;

    virtual ~Coach() {

    }

    virtual bool MakeTrip(double DistanceOfTrip) {
        for (double i = DistanceOfTrip / 100.; i <= DistanceOfTrip; i += DistanceOfTrip / 100.) {
            totalDistance += DistanceOfTrip / 100.;
            totalTime += DistanceOfTrip / Speed;
            if (totalDistance <= MAX_DISTANCE && Speed >= pow(10., -2.)) {
                Speed = GetBaseSpeed() * exp(-totalTime / 500.);
            }
            else {
                return false;
            }
        }
        return true;
    }

    virtual double GetSpeed() const {
        return Speed;
    }

    virtual const double GetBaseSpeed(){
        return DefaultCoachSpeed;
    }

    virtual const char* GetName() const{
        return nameCString;
    }

    Coach& operator= (const Coach &A){
        Speed = A.Speed;
        totalTime=A.totalDistance;
        totalDistance = A.totalDistance;
        for (int i = 0; (i < MAX_NAME_LENGTH) && (nameCString[i] != 0); ++i) {
            nameCString[i] = 0;
        }
        for (int i = 0; (i < MAX_NAME_LENGTH) && (A.nameCString[i] != 0); ++i) {
            nameCString[i] = A.nameCString[i];
        }
    }

private:
    char nameCString[MAX_NAME_LENGTH];
    double Speed = DefaultCoachSpeed;

    void SetName(const char inNameCString[]) {
        int i = 0;
        for (i = 0; (inNameCString[i] != 0) && (i < MAX_NAME_LENGTH); ++i) {
            nameCString[i] = inNameCString[i];
        }
        nameCString[i] = 0;
    }
};
Aeroplane.h
#include "Vehicle.h"
#include "Computer.h"
class Aeroplane : public Vehicle, private Computer {
public:
    double timeSinceLastRepair = 0;
    static const int MAX_FLY_TIME = 10;

    Aeroplane() {
        SetName(DefaultAeroplaneName);
    }

    Aeroplane(const char inNameCString[], double inBaseSpeed, int inBasePrice = 0) {
        SetName(inNameCString);
    }

    virtual ~Aeroplane() {

    }

    double GetSpeed() const{
        return DefaultAeroplaneSpeed;
    }

    virtual bool MakeTrip(double DistanceOfTrip) {
        double TimeOfTrip = DistanceOfTrip / GetSpeed() + GetTimeToBoot();
        if (timeSinceLastRepair + TimeOfTrip > MAX_FLY_TIME) {
            return false;
        }
        timeSinceLastRepair += TimeOfTrip;
        totalDistance += DistanceOfTrip;
        totalTime += TimeOfTrip;
        return true;
    }

    void Repair() {
        timeSinceLastRepair = 0;
    }

    double GetTimeSinceLastRepair() const {
        return timeSinceLastRepair;
    }

    void ComputerUpdate(double newTimeToBoot) {
        baseTimeToBoot = newTimeToBoot;
    }

    const char* GetName() const{
        return nameCString;
    }

    Aeroplane& operator= (const Aeroplane &A){
        DefaultAeroplaneSpeed = A.DefaultAeroplaneSpeed;
        for (int i = 0; (i < MAX_NAME_LENGTH) && (nameCString[i] != 0); ++i) {
            nameCString[i] = 0;
        }
        for (int i = 0; (i < MAX_NAME_LENGTH) && (A.nameCString[i] != 0); ++i) {
            nameCString[i] = A.nameCString[i];
        }
    }

private:
    const char DefaultAeroplaneName[18] = "Default Aeroplane";
    double DefaultAeroplaneSpeed = 500.;
    char nameCString[MAX_NAME_LENGTH];

    void SetName(const char inNameCString[]) {
        int i = 0;
        for (i = 0; (inNameCString[i] != 0) && (i < MAX_NAME_LENGTH); ++i) {
            nameCString[i] = inNameCString[i];
        }
        //i+=1;
        nameCString[i]=0;
    }
};
Automobile
#include <iostream>
#include "Vehicle.h"
#include <cmath>
#include <stdlib.h>

class Automobile : virtual public Vehicle {
public:
    const char DefaultAutomobileName[19] = "Default Automobile";
    const double DefaultAutomobileSpeed = 100.;

    Automobile() {
        SetName(DefaultAutomobileName);
    }

    Automobile(const char inNameCString[], double inBaseSpeed, int inBasePrice)  {
        Speed = inBaseSpeed;
        SetName(inNameCString);
    }

    Automobile(const Automobile&) = default;

    virtual ~Automobile() {

    }

    virtual bool MakeTrip(double DistanceOfTrip) {
        for (double i = DistanceOfTrip / 100.; i <= DistanceOfTrip; i += DistanceOfTrip / 100.) {
            totalDistance += DistanceOfTrip / 100.;
            totalTime += DistanceOfTrip / Speed;
            if (Speed > pow(10., -2.)) {
                Speed = GetBaseSpeed() * exp(-totalDistance / 500.);
            }
            else {
                return false;
            }
        }
        return true;
    }

    virtual const char* GetName() const{
        return nameCString;
    }

    virtual const double GetBaseSpeed(){
        return DefaultAutomobileSpeed;
    }

    virtual double GetSpeed() const{
        return Speed;
    }

    Automobile& operator= (const Automobile &A){
        Speed = A.Speed;
        totalTime=A.totalDistance;
        totalDistance = A.totalDistance;
        for (int i = 0; (i < MAX_NAME_LENGTH) && (nameCString[i] != 0); ++i) {
            nameCString[i] = 0;
        }
        for (int i = 0; (i < MAX_NAME_LENGTH) && (A.nameCString[i] != 0); ++i) {
            nameCString[i] = A.nameCString[i];
        }
    }

private:
    char nameCString[MAX_NAME_LENGTH];
    double Speed = DefaultAutomobileSpeed;

    void SetName(const char inNameCString[]) {
        int i = 0;
        for (i = 0; (inNameCString[i] != 0) && (i < MAX_NAME_LENGTH); ++i) {
            nameCString[i] = inNameCString[i];
        }
        nameCString[i] = 0;
    }
};
Computer.h
class Computer {
public:
    const double DefaultTimeToBoot = 0.01;
    Computer() {
        baseTimeToBoot = DefaultTimeToBoot;
    }
    double GetTimeToBoot() {
        return baseTimeToBoot;
    }
protected:
    double baseTimeToBoot;
};
AutoCoach.h
#include <iostream>
#include "Automobile.h"
#include "Coach.h"
#include <cmath>
#include "Vehicle.h"

class AutoCoach: public Automobile, public Coach{
public:
    const char DefaultAutocoachName[19] = "Default Autocoach";
    const double DefaultAutocoachSpeed = 100.;

    AutoCoach() {
        SetName(DefaultAutocoachName);
    }

    AutoCoach(const char inNameCString[], double inBaseSpeed, int inBasePrice)  {
        Speed = inBaseSpeed;
        SetName(inNameCString);
    }

    AutoCoach(const AutoCoach&) = default;

    virtual ~AutoCoach() {

    }

    bool MakeTrip(double DistanceOfTrip) {
        for (double i = DistanceOfTrip / 100.; i <= DistanceOfTrip; i += DistanceOfTrip / 100.) {
            totalDistance += DistanceOfTrip / 100.;
            totalTime += DistanceOfTrip / Speed;
            if (Speed > 1 ){
                Speed = GetSpeed() * exp(-totalTime / 1000.);
            }
            else {
                break;
            }
        }
    }

    const char* GetName() const{
        return nameCString;
    }

    const double GetBaseSpeed(){
        return DefaultAutocoachSpeed;
    }

    double GetSpeed() const{
        return Speed;
    }

    AutoCoach& operator=(const AutoCoach &A){
        Speed = A.Speed;
        totalTime=A.totalDistance;
        totalDistance = A.totalDistance;
        for (int i = 0; (i < MAX_NAME_LENGTH) && (nameCString[i] != 0); ++i) {
            nameCString[i] = 0;
        }
        for (int i = 0; (i < MAX_NAME_LENGTH) && (A.nameCString[i] != 0); ++i) {
            nameCString[i] = A.nameCString[i];
        }
    }

private:
    char nameCString[MAX_NAME_LENGTH];
    double Speed = DefaultAutocoachSpeed;

    void SetName(const char inNameCString[]) {
        int i = 0;
        for (i = 0; (inNameCString[i] != 0) && (i < MAX_NAME_LENGTH); ++i) {
            nameCString[i] = inNameCString[i];
        }
        nameCString[i] = 0;
    }
};
Vector.h
#include <iostream>

template <class TypeOfElement>
class MyVector {
private:
    int length;
    int capacity;
    TypeOfElement* dataPointer;

    void UpCapacity(int newCapacity) {
        if (newCapacity > capacity) {
            TypeOfElement* tmp = new TypeOfElement[length];
            for (int i = 0; i < length; ++i) {
                tmp[i] = dataPointer[i];
            }
            delete[] dataPointer;
            dataPointer = new TypeOfElement[newCapacity];
            for (int i = 0; i < capacity; ++i) {
                dataPointer[i] = tmp[i];
            }
            capacity = newCapacity;
            delete[] tmp;
            tmp = nullptr;
        }
    }

public:

    MyVector(const MyVector&);

    MyVector() {
        length = 0;
        capacity = 1;
        dataPointer = new TypeOfElement[1];
    }

    ~MyVector() {
        delete[] dataPointer;
        dataPointer = nullptr;
        length = 0;
    }

    void PushBack(TypeOfElement newElement) {
        UpCapacity(length + 1);
        dataPointer[length] = newElement;
        length++;
    }

    TypeOfElement& operator[](int index) const {
        return *(dataPointer + index);
    }

    bool IsEmpty() const {
        return (length == 0);
    }

    int Length() const {
        return length;
    }

    int Capacity() const {
        return capacity;
    }

    MyVector& operator=(const MyVector&);

    MyVector<TypeOfElement> operator+(const MyVector&);

};

template <typename TypeOfElement>
MyVector<TypeOfElement>::MyVector(const MyVector<TypeOfElement>& rhs) {
    this->length = rhs.Length();
    this->capacity = rhs.Capacity();
    this->dataPointer = new TypeOfElement[this->capacity];
    for (int i = 0; i < this->capacity; ++i)
        this->dataPointer[i] = rhs[i];
}


template <class TypeOfElement>
MyVector<TypeOfElement>& MyVector<TypeOfElement>::operator=(const MyVector<TypeOfElement>& vec2) {
    MyVector<TypeOfElement> t(vec2);
    if (this->capacity != 0) {
        delete[] this->dataPointer;
    }
    this->length = t.Length();
    this->capacity = t.Capacity();
    this->dataPointer = new TypeOfElement[this->capacity];
    for (int i = 0; i < this->capacity; ++i) {
        this->dataPointer[i] = t[i];
    }
    return *this;
}

template <class TypeOfElement>
MyVector<TypeOfElement> MyVector<TypeOfElement>::operator+(const MyVector<TypeOfElement>& rhs) {
    MyVector<TypeOfElement> res = *this;
    for (int i = 0; i < rhs.Length(); ++i) {
        res.PushBack(rhs[i]);
    }
    return res;
}

template <class MyType>
void MySwap(MyType& element1, MyType& element2) {
    MyType tmp = element1;
    element1 = element2;
    element2 = tmp;
}

template <class TypeOfElement>
void InputMyVector(MyVector<TypeOfElement>& inVector, int N) {
    std::cout << "Input vector elements: " << std::endl;
    TypeOfElement k = 0;
    for (int i = 0; i < N; ++i) {
        std::cin >> k;
        inVector.PushBack(k);
    }
}

template <class TypeOfElement>
void OutputMyVector(MyVector<TypeOfElement>& outVector) {
    for (int i = 0; i < outVector.Length(); ++i) {
        std::cout << outVector[i] << "  ";
    }
    std::cout << std::endl;
}

template <class T>
bool LessFunction(T a, T b){
    if(a->GetSpeed()<=b->GetSpeed()){
        return true;
    }
    else{
        return false;
    }
}

template <class ArrayType>
int FindMinimumIndex (ArrayType &data_array, int beginIndex, int endIndex) {
    int minimumIndex = beginIndex;
    for (int element_number = beginIndex + 1; element_number <= endIndex; ++element_number) {
        if (LessFunction (data_array[element_number], data_array[minimumIndex])) {
            minimumIndex = element_number;
        }
    }
    return minimumIndex;
}

template <class ArrayType>
void SelectionSort (ArrayType &data_array, int beginIndex, int endIndex) {
    for (int element_number = beginIndex; element_number < endIndex; ++element_number) {
        int minimumIndex = FindMinimumIndex (data_array, element_number, endIndex);
        MySwap (data_array[minimumIndex], data_array[element_number]);
    }
}

Код для Main:
#include <iostream>
#include <cmath>
#include "Vehicle.h"
#include "Coach.h"
#include "vector.h"
#include "Aeroplane.h"
#include "Computer.h"
#include "Automobile.h"
#include "AutoCoach.h"

void CommitRandomTrips(MyVector<Vehicle*>& vehicles) {
    for (int i = 0; i < vehicles.Length(); ++i) {
        double randomDistance = double(rand() % 20001) / 10.;
        vehicles[i]->MakeTrip(randomDistance);
    }
}

void DisplayVehicles (const MyVector<Vehicle *> &vehicles) {
    printf("%s \t\t\t   %s\t\t  %s\t\t\t   %s\n", "Name", "Speed", "Dist", "Time");
    for (int i = 0; i < vehicles.Length (); ++i) {
        printf("%s \t\t %7.2lf  \t\t %7.2lf  \t\t %6.2lf  \n", vehicles[i]->GetName(), vehicles[i]->GetSpeed (),
               vehicles[i]->GetTotalDistance (), vehicles[i]->GetTotalTime ());
    }
}

int main() {
    srand(0);
    MyVector<Coach> coaches;
    MyVector<Automobile> automobiles;
    MyVector<Aeroplane> aeroplanes;
    MyVector<AutoCoach> autocoaches;

    coaches.PushBack (Coach ("Coach 1", 9.));
    coaches.PushBack (Coach ("Coach 2", 11.));
    coaches.PushBack (Coach ("Coach 3", 10.));
    coaches.PushBack (Coach ("Coach 4", 9.5));
    coaches.PushBack (Coach ("Coach 5", 2.));

    automobiles.PushBack (Automobile ("Automobile 1", 100., 0));
    automobiles.PushBack (Automobile ("Automobile 2", 90., 0));
    automobiles.PushBack (Automobile ("Automobile 3", 120., 0));
    automobiles.PushBack (Automobile ("Automobile 4", 150., 0));

    aeroplanes.PushBack (Aeroplane ("Aeroplane 1", 1030.));
    aeroplanes.PushBack (Aeroplane ("Aeroplane 2", 560.));
    aeroplanes.PushBack (Aeroplane ("Aeroplane 3", 2200.));

    autocoaches.PushBack(AutoCoach("Autocoach 1", 50., 0.));
    autocoaches.PushBack(AutoCoach("Autocoach 2", 39., 0.));
    autocoaches.PushBack(AutoCoach("Autocoach 3", 68., 0.));

    MyVector<Vehicle *> coachPointers;
    MyVector<Vehicle *> automobilePointers;
    MyVector<Vehicle *> aeroplanePointers;
    MyVector<Vehicle *> autocoachPointers;

    for (int i = 0; i < coaches.Length(); ++i) {
        coachPointers.PushBack (&coaches[i]);
        printf("%s \t\t\t   %s\t\t  %s\t\t\t   %s\n", "Name", "Speed", "Dist", "Time");
        printf("%s \t\t %7.2lf  \t\t %7.2lf  \t\t %6.2lf  \n", coachPointers[i]->GetName(), coachPointers[i]->GetSpeed (),
               coachPointers[i]->GetTotalDistance (), coachPointers[i]->GetTotalTime ());
    }

    for (int i = 0; i < automobiles.Length(); ++i) {
        automobilePointers.PushBack (&automobiles[i]);
        /*printf("%s \t\t\t   %s\t\t  %s\t\t\t   %s\n", "Name", "Speed", "Dist", "Time");
        printf("%s \t\t %7.2lf  \t\t %7.2lf  \t\t %6.2lf  \n", automobilePointers[i]->GetName(),
               automobilePointers[i]->GetSpeed (), automobilePointers[i]->GetTotalDistance (), automobilePointers[i]->GetTotalTime ());*/
    }

    for (int i = 0; i < aeroplanes.Length(); ++i) {
        aeroplanePointers.PushBack (&aeroplanes[i]);
        /*printf("%s \t\t\t   %s\t\t  %s\t\t\t   %s\n", "Name", "Speed", "Dist", "Time");
        printf("%s \t\t %7.2lf  \t\t %7.2lf  \t\t %6.2lf  \n", aeroplanePointers[i]->GetName(), aeroplanePointers[i]->GetSpeed (),
               aeroplanePointers[i]->GetTotalDistance (), aeroplanePointers[i]->GetTotalTime ());*/
    }

    for (int i = 0; i < autocoaches.Length(); ++i) {
        autocoachPointers.PushBack (&autocoaches[i]);
        /*printf("%s \t\t\t   %s\t\t  %s\t\t\t   %s\n", "Name", "Speed", "Dist", "Time");
        printf("%s \t\t %7.2lf  \t\t %7.2lf  \t\t %6.2lf  \n", autocoachPointers[i]->GetName(), autocoachPointers[i]->GetSpeed (),
               autocoachPointers[i]->GetTotalDistance (), autocoachPointers[i]->GetTotalTime ());*/
    }

    MyVector<Vehicle *> vehiclePointers = coachPointers + automobilePointers + aeroplanePointers + autocoachPointers;
    CommitRandomTrips(vehiclePointers);
    SelectionSort(vehiclePointers, 0, vehiclePointers.Length()-1);
    DisplayVehicles(vehiclePointers);

    return 0;
}
